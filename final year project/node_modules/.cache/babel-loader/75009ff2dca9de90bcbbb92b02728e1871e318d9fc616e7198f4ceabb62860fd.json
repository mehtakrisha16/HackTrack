{"ast":null,"code":"import _objectSpread from \"D:/final year project/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/final year project/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"onUpdate\", \"onComplete\"];\nimport { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n      onUpdate,\n      onComplete\n    } = _ref,\n    options = _objectWithoutProperties(_ref, _excluded);\n  const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0;\n  if (!canAccelerateAnimation) return false;\n  let {\n    keyframes,\n    duration = 300,\n    elapsed = 0,\n    ease\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n    /**\n     * If we need to pre-generate keyframes and repeat is infinite then\n     * early return as this will lock the thread.\n     */\n    if (options.repeat === Infinity) return;\n    const sampleAnimation = animate(_objectSpread(_objectSpread({}, options), {}, {\n      elapsed: 0\n    }));\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < 20000) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  const animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    delay: -elapsed,\n    duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  }));\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = () => {\n    value.set(getFinalKeyframe(keyframes, options));\n    sync.update(() => animation.cancel());\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return {\n    get currentTime() {\n      return animation.currentTime || 0;\n    },\n    set currentTime(t) {\n      animation.currentTime = t;\n    },\n    stop: () => {\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n      const {\n        currentTime\n      } = animation;\n      if (currentTime) {\n        const sampleAnimation = animate(_objectSpread(_objectSpread({}, options), {}, {\n          autoplay: false\n        }));\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      sync.update(() => animation.cancel());\n    }\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animate","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","acceleratedValues","Set","sampleDelta","createAcceleratedAnimation","value","valueName","_ref","onUpdate","onComplete","options","_objectWithoutProperties","_excluded","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","keyframes","duration","elapsed","ease","type","repeat","Infinity","sampleAnimation","_objectSpread","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","delay","onfinish","set","update","cancel","currentTime","stop","autoplay","setWithVelocity"],"sources":["D:/final year project/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0;\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        /**\n         * If we need to pre-generate keyframes and repeat is infinite then\n         * early return as this will lock the thread.\n         */\n        if (options.repeat === Infinity)\n            return;\n        const sampleAnimation = animate({ ...options, elapsed: 0 });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < 20000) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        get currentTime() {\n            return animation.currentTime || 0;\n        },\n        set currentTime(t) {\n            animation.currentTime = t;\n        },\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animate({ ...options, autoplay: false });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}